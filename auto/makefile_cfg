#gcc编译过程全开
DEBUG_CC_ECHO_FULL := 0

ifeq ("$(DEBUG_CC_ECHO_FULL)","1")
V:=-v
else
V:=
endif

PACKAGE_PATH = ${LICHEE_TOP_DIR}/buildroot/package/auto

INSTALL_PATH = $(PACKAGE_PATH)/sdk_demo/bin

ROOTFS_PATH = $(LICHEE_BR_OUT)/target

SDK_PATH = $(PACKAGE_PATH)/sdk_lib

SDK_LIBS = $(SDK_PATH)/libs

CEDAR_LIBS = $(LICHEE_BR_OUT)/target/usr/lib/

ifneq (,$(filter $(LICHEE_IC),t113 t113_i t113_s3p t113_s4 t113_s4p))
DEFINES += -D_T113_ -DKERNEL_5_4
else ifneq (,$(filter $(LICHEE_IC),a40i a40i_h a40i_c t3 t3_c t3_pro))
DEFINES += -D_AW1701_ -DKERNEL_5_10
endif

$(shell mkdir -p $(SDK_LIBS))

ifeq ("x$(LICHEE_BR_OUT)","x")
TOOLTRAIN_ERR_STRING = ' ========================tooltrain report=======================================\n'\
						'LICHEE_BR_OUT is empty at env\n'\
						'pls run "\e[1;33msource .buildconfig\e[0m" at the top SDK dir\n'\
						'========================tooltrain report =======================================\n'
else
TOOLTRAIN_ERR_STRING = ""
endif

#GCC=$LICHEE_BR_OUT/host/bin/aarch64-linux-gnu-gcc
#OUT_GCC = `find ${LICHEE_BR_OUT} -perm /a+x -a -regex '.*-gcc'`
#OUT_CPP = `find ${LICHEE_BR_OUT} -perm /a+x -a -regex '.*-g\+\+'`
#OUT_STRIP = `find ${LICHEE_BR_OUT} -perm /a+x -a -regex '.*-strip'`

# default use buildroot cross compiler
# TODO: only support arm-abi and arm-abihf
BUILDROOT_COMPILER=${LICHEE_BR_OUT}/host/bin/${LICHEE_CROSS_COMPILER}

GCC_PATH=${BUILDROOT_COMPILER}-gcc
ifeq ($(wildcard $(GCC_PATH)),)
ifeq ("$(LICHEE_ARCH)","arm64")
BUILDROOT_COMPILER=${LICHEE_BR_OUT}/host/bin/aarch64-none-linux-gnu
endif
endif

SDK_LIB_CROSS_COMPILER:=${BUILDROOT_COMPILER}

#TODO: auto project should not used the kernel compiler tools,
#      it need to used toolchain which is used int buildroot
ifeq ("x$(LICHEE_GNUEABI)", "xgnueabihf")
SDK_LIB_CROSS_COMPILER:=${LICHEE_CROSS_COMPILER}hf
endif

CC = ${SDK_LIB_CROSS_COMPILER}-gcc -g $(V)
CPP = ${SDK_LIB_CROSS_COMPILER}-g++ -g $(V)
STRIP = ${SDK_LIB_CROSS_COMPILER}-strip

PATH1 := $(LICHEE_BR_OUT)/host/bin/:$(PATH)
PATH = $(PATH1)
export $(PATH)

MULTIMEDIA_PATH=$(LICHEE_TOP_DIR)/platform/allwinner/multimedia
CDCINC=$(MULTIMEDIA_PATH)/libcedarc/include
CDEINC=$(MULTIMEDIA_PATH)/libcedare


CDXINC=$(MULTIMEDIA_PATH)/libcedarx
CDXEXT=$(MULTIMEDIA_PATH)/libcedarx/external/include
CDXCOR=$(MULTIMEDIA_PATH)/libcedarx/libcore
CDXMETA=$(CDXINC)/xmetadataretriever/include

CDX=$(CDXINC):CDXEXT=$(CDXEXT):CDXCOR=$(CDXCOR):$(CDXINC):$(CDXMETA):$(CDXINC)/xplayer/include:$(CDXEXT):$(CDXEXT)/adecoder:$(CDXEXT)/aencoder:$(CDXEXT)/alsa/sound:$(CDXEXT)/adecoder:$(CDXEXT)/libxml:$(CDXEXT)/live:$(CDXEXT)/openssl:$(CDXEXT)/sdecoder:$(CDXEXT)/include/zlib:$(CDXINC)/libcedarc/include:$(CDXCOR)/base/include:$(CDXCOR)/muxer/include:$(CDXCOR)/parser/include:$(CDXCOR)/stream/include:$(CDXCOR)/common/iniparser:$(CDXCOR)/common/plugin:$(CDXCOR)/playback/include:$(CDXCOR)/libion/include

export CPLUS_INCLUDE_PATH := $(SDK_PATH)/include:$(SDK_PATH)/include/linux:$(SDK_PATH)/include/camera:$(CDX):$(CDCINC):$(CDEINC)
export C_INCLUDE_PATH=$(SDK_PATH)/include:$(SDK_PATH)/include/linux:$(CDX):$(CDCINC):$(CDEINC)

ANDROID_UTILS_DEF = -DHAVE_PTHREADS -DHAVE_SYS_UIO_H -DANDROID_SMP=1 -D__ARM_HAVE_DMB -D__ARM_HAVE_LDREX_STREX -DHAVE_POSIX_CLOCKS -DHAVE_PRCTL

CEDAR_MACORS = -D_GNU_SOURCE -DCONFIG_CHIP=7 -DCONFIG_TARGET_PRODUCT= -DCONFIG_PRODUCT=2 \
				-DCONFIG_VE_IPC=1 -DROTATE_PIC_HW=0 -DVE_PHY_OFFSET=0x40000000 -DCONFIG_LOG_LEVEL=0

SDKLIB_DEF = -DCDX_V27 -DSUPPORT_NEW_DRIVER -D_REENTRANT

SDKLIB_INC := -I$(SDK_PATH)/include \
			-I$(SDK_PATH)/include/storage \
			-I$(SDK_PATH)/include/disp2 \
			-I$(SDK_PATH)/include/cutils \
			-I$(SDK_PATH)/include/utils \
			-I$(SDK_PATH)/include/camera \

